import math

EMPTY = 0
PLAYER_X = 1
PLAYER_O = -1
def print_board(board):
    for row in board:
        print(" | ".join(map(lambda cell: "X" if cell == PLAYER_X else ("O" if cell == PLAYER_O else " "), row)))
        print("-" * 5)
def is_terminal(board):
    for row in board:
        if all(cell == PLAYER_X for cell in row) or all(cell == PLAYER_O for cell in row):
            return True
    for col in range(3):
        if all(board[row][col] == PLAYER_X for row in range(3)) or all(board[row][col] == PLAYER_O for row in range(3)):
            return True
    if (board[0][0] == board[1][1] == board[2][2] != EMPTY) or (board[0][2] == board[1][1] == board[2][0] != EMPTY):
        return True
    if all(cell != EMPTY for row in board for cell in row):
        return True
    return False
def available_moves(board):
    moves = []
    for i in range(3):
        for j in range(3):
            if board[i][j] == EMPTY:
                moves.append((i, j))
    return moves
def evaluate(board):
    for row in board:
        if all(cell == PLAYER_X for cell in row):
            return 1
        elif all(cell == PLAYER_O for cell in row):
            return -1
    for col in range(3):
        if all(board[row][col] == PLAYER_X for row in range(3)):
            return 1
        elif all(board[row][col] == PLAYER_O for row in range(3)):
            return -1
    if board[0][0] == board[1][1] == board[2][2] == PLAYER_X or board[0][2] == board[1][1] == board[2][0] == PLAYER_X:
        return 1
    elif board[0][0] == board[1][1] == board[2][2] == PLAYER_O or board[0][2] == board[1][1] == board[2][0] == PLAYER_O:
        return -1
    return 0
def minimax(board, depth, maximizing_player):
    if is_terminal(board):
        return evaluate(board)
    if maximizing_player:
        max_eval = -math.inf
        for move in available_moves(board):
            board[move[0]][move[1]] = PLAYER_X
            eval = minimax(board, depth + 1, False)
            board[move[0]][move[1]] = EMPTY
            max_eval = max(max_eval, eval)
        return max_eval
    else:
        min_eval = math.inf
        for move in available_moves(board):
            board[move[0]][move[1]] = PLAYER_O
            eval = minimax(board, depth + 1, True)
            board[move[0]][move[1]] = EMPTY
            min_eval = min(min_eval, eval)
        return min_eval
def ai_move(board):
    best_move = None
    best_eval = -math.inf
    for move in available_moves(board):
        board[move[0]][move[1]] = PLAYER_X
        eval = minimax(board, 0, False)
        board[move[0]][move[1]] = EMPTY
        if eval > best_eval:
            best_eval = eval
            best_move = move
    board[best_move[0]][best_move[1]] = PLAYER_X
def play_game():
    board = [[EMPTY, EMPTY, EMPTY] for _ in range(3)]
    current_player = PLAYER_X
    while not is_terminal(board):
        print_board(board)
        if current_player == PLAYER_X:
            print("Player X's turn.")
            row = int(input("Enter the row (0, 1, or 2): "))
            col = int(input("Enter the column (0, 1, or 2): "))
            if board[row][col] != EMPTY:
                print("Invalid move. Try again.")
                continue
            board[row][col] = current_player
        else:
            print("Player O's turn.")
            ai_move(board)
        current_player *= -1
    print_board(board)
    result = evaluate(board)
    if result == 1:
        print("Player X wins!")
    elif result == -1:
        print("Player O wins!")
    else:
        print("It's a draw!")
# To start the game
play_game()

